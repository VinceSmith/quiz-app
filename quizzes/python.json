{
  "items": [
    {
      "level": "Beginner",
      "question": "What is the output of print(2 ** 3)?",
      "choices": [
        "6",
        "8",
        "9",
        "Error"
      ],
      "answerIndex": 1,
      "explanation": "'**' is exponentiation; 2 ** 3 = 8."
    },
    {
      "level": "Beginner",
      "question": "Which keyword defines a function in Python?",
      "choices": [
        "func",
        "def",
        "function",
        "lambda"
      ],
      "answerIndex": 1,
      "explanation": "Use 'def' to define a function."
    },
    {
      "level": "Intermediate",
      "question": "What does list(map(str, [1,2,3])) produce?",
      "choices": [
        "['1', '2', '3']",
        "[1, 2, 3]",
        "('1','2','3')",
        "{'1','2','3'}"
      ],
      "answerIndex": 0,
      "explanation": "map applies str to each element, returning strings; then list() collects them."
    },
    {
      "level": "Intermediate",
      "question": "What is len(set([1,1,2]))?",
      "choices": [
        "3",
        "2",
        "1",
        "Error"
      ],
      "answerIndex": 1,
      "explanation": "A set removes duplicates; {1,2} has length 2."
    },
    {
      "level": "Advanced",
      "question": "In CPython, the GIL means:",
      "choices": [
        "All threads run Python bytecode in parallel",
        "Only one thread executes Python bytecode at a time",
        "I/O cannot run concurrently",
        "Asyncio runs faster than C"
      ],
      "answerIndex": 1,
      "explanation": "The Global Interpreter Lock (GIL) allows only one thread to execute Python bytecode at a time."
  },

    {
      "level": "Beginner",
      "question": "Which symbol is used for comments in Python?",
      "choices": ["#", "//", "--", "/*"],
      "answerIndex": 0,
      "explanation": "# is used for comments."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print('Hello' + 'World')?",
      "choices": ["HelloWorld", "Hello World", "Error", "Hello+World"],
      "answerIndex": 0,
      "explanation": "String concatenation without space."
    },
    {
      "level": "Beginner",
      "question": "Which data type is used to store True/False values?",
      "choices": ["int", "str", "bool", "float"],
      "answerIndex": 2,
      "explanation": "bool is for True/False."
    },
    {
      "level": "Beginner",
      "question": "How do you start a for loop in Python?",
      "choices": ["for i in range(5):", "for (i=0; i<5; i++)", "foreach i in 5", "loop i in 5"],
      "answerIndex": 0,
      "explanation": "for i in range(5): is correct syntax."
    },
    {
      "level": "Beginner",
      "question": "Which function prints output in Python?",
      "choices": ["echo()", "print()", "output()", "write()"],
      "answerIndex": 1,
      "explanation": "print() is used for output."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print(type(42))?",
      "choices": ["<class 'int'>", "int", "type", "42"],
      "answerIndex": 0,
      "explanation": "type(42) returns <class 'int'>."
    },
    {
      "level": "Beginner",
      "question": "Which keyword is used to import modules?",
      "choices": ["include", "import", "require", "using"],
      "answerIndex": 1,
      "explanation": "import is used for modules."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print(len('Python'))?",
      "choices": ["5", "6", "7", "Error"],
      "answerIndex": 1,
      "explanation": "'Python' has 6 letters."
    },
    {
      "level": "Beginner",
      "question": "Which of these is a valid variable name?",
      "choices": ["2name", "name_2", "name-2", "name 2"],
      "answerIndex": 1,
      "explanation": "name_2 is valid."
    },
    {
      "level": "Beginner",
      "question": "How do you write a string in Python?",
      "choices": ["'text'", "text", "[text]", "{text}"],
      "answerIndex": 0,
      "explanation": "Strings use quotes."
    },
    {
      "level": "Beginner",
      "question": "Which function converts a string to an integer?",
      "choices": ["str()", "int()", "float()", "bool()"],
      "answerIndex": 1,
      "explanation": "int() converts to integer."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print(10 // 3)?",
      "choices": ["3.33", "3", "4", "Error"],
      "answerIndex": 1,
      "explanation": "// is integer division."
    },
    {
      "level": "Beginner",
      "question": "Which keyword is used to define a class?",
      "choices": ["object", "class", "type", "struct"],
      "answerIndex": 1,
      "explanation": "class is used for classes."
    },
    {
      "level": "Beginner",
      "question": "How do you get user input in Python?",
      "choices": ["input()", "get()", "read()", "scan()"],
      "answerIndex": 0,
      "explanation": "input() gets user input."
    },
    {
      "level": "Beginner",
      "question": "Which operator checks equality?",
      "choices": ["=", "==", "!=", "equals"],
      "answerIndex": 1,
      "explanation": "== checks equality."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print([1,2,3][0])?",
      "choices": ["1", "2", "3", "0"],
      "answerIndex": 0,
      "explanation": "Lists are zero-indexed."
    },
    {
      "level": "Beginner",
      "question": "Which function returns the length of a list?",
      "choices": ["size()", "count()", "len()", "length()"],
      "answerIndex": 2,
      "explanation": "len() returns length."
    },
    {
      "level": "Beginner",
      "question": "How do you write a multi-line string?",
      "choices": ["'''text'''", "text\ntext", "text; text", "text text"],
      "answerIndex": 0,
      "explanation": "Triple quotes for multi-line strings."
    },
    {
      "level": "Beginner",
      "question": "Which value represents 'nothing' in Python?",
      "choices": ["null", "None", "void", "empty"],
      "answerIndex": 1,
      "explanation": "None is Python's null value."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print(bool(0))?",
      "choices": ["True", "False", "0", "Error"],
      "answerIndex": 1,
      "explanation": "bool(0) is False."
    },
    {
      "level": "Beginner",
      "question": "Which function sorts a list in place?",
      "choices": ["sort()", "order()", "arrange()", "sorted()"],
      "answerIndex": 0,
      "explanation": "sort() sorts in place."
    },
    {
      "level": "Beginner",
      "question": "How do you access dictionary values?",
      "choices": ["dict.key", "dict[key]", "dict->key", "dict(key)"],
      "answerIndex": 1,
      "explanation": "dict[key] accesses values."
    },
    {
      "level": "Beginner",
      "question": "Which function returns the maximum value?",
      "choices": ["max()", "maximum()", "top()", "highest()"],
      "answerIndex": 0,
      "explanation": "max() returns maximum."
    },
    {
      "level": "Beginner",
      "question": "What is the output of print(type([]))?",
      "choices": ["<class 'list'>", "list", "[]", "Error"],
      "answerIndex": 0,
      "explanation": "type([]) is <class 'list'>."
    },
    {
      "level": "Beginner",
      "question": "Which function returns the absolute value?",
      "choices": ["abs()", "absolute()", "fabs()", "value()"],
      "answerIndex": 0,
      "explanation": "abs() returns absolute value."
  },

    {
      "level": "Intermediate",
      "question": "What is the output of print('a,b,c'.split(','))?",
      "choices": ["['a', 'b', 'c']", "['a,b,c']", "('a','b','c')", "Error"],
      "answerIndex": 0,
      "explanation": "split(',') splits by comma."
    },
    {
      "level": "Intermediate",
      "question": "Which method adds an item to a list?",
      "choices": ["add()", "append()", "insert()", "push()"],
      "answerIndex": 1,
      "explanation": "append() adds to list."
    },
    {
      "level": "Intermediate",
      "question": "What is the output of print({1,2,3} & {2,3,4})?",
      "choices": ["{2,3}", "{1,4}", "{1,2,3,4}", "Error"],
      "answerIndex": 0,
      "explanation": "& is set intersection."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a sorted copy of a list?",
      "choices": ["sort()", "sorted()", "order()", "copy()"],
      "answerIndex": 1,
      "explanation": "sorted() returns a sorted copy."
    },
    {
      "level": "Intermediate",
      "question": "How do you handle exceptions in Python?",
      "choices": ["try/except", "catch/except", "error/except", "handle/except"],
      "answerIndex": 0,
      "explanation": "try/except is used."
    },
    {
      "level": "Intermediate",
      "question": "What is the output of print([x for x in range(3)])?",
      "choices": ["[0,1,2]", "[1,2,3]", "[0,1,2,3]", "Error"],
      "answerIndex": 0,
      "explanation": "range(3) gives 0,1,2."
    },
    {
      "level": "Intermediate",
      "question": "Which method removes the last item from a list?",
      "choices": ["remove()", "pop()", "delete()", "discard()"],
      "answerIndex": 1,
      "explanation": "pop() removes last item."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a key exists in a dictionary?",
      "choices": ["key in dict", "dict.has(key)", "dict.exists(key)", "dict[key] != None"],
      "answerIndex": 0,
      "explanation": "key in dict checks existence."
    },
    {
      "level": "Intermediate",
      "question": "What is the output of print(bool([]))?",
      "choices": ["True", "False", "[]", "Error"],
      "answerIndex": 1,
      "explanation": "Empty list is False."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the minimum value?",
      "choices": ["min()", "minimum()", "lowest()", "bottom()"],
      "answerIndex": 0,
      "explanation": "min() returns minimum."
    },
    {
      "level": "Intermediate",
      "question": "How do you create a tuple?",
      "choices": ["(1,2)", "[1,2]", "{1,2}", "tuple(1,2)"],
      "answerIndex": 0,
      "explanation": "Tuples use parentheses."
    },
    {
      "level": "Intermediate",
      "question": "Which method returns the index of an item in a list?",
      "choices": ["find()", "index()", "search()", "locate()"],
      "answerIndex": 1,
      "explanation": "index() returns index."
    },
    {
      "level": "Intermediate",
      "question": "What is the output of print('Python'.lower())?",
      "choices": ["python", "PYTHON", "Python", "error"],
      "answerIndex": 0,
      "explanation": "lower() makes lowercase."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the sum of a list?",
      "choices": ["sum()", "add()", "total()", "plus()"],
      "answerIndex": 0,
      "explanation": "sum() returns sum."
    },
    {
      "level": "Intermediate",
      "question": "How do you reverse a list?",
      "choices": ["list.reverse()", "reverse(list)", "list[::-1]", "list.reversed()"],
      "answerIndex": 2,
      "explanation": "list[::-1] reverses list."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the type of an object?",
      "choices": ["type()", "class()", "object()", "typeof()"],
      "answerIndex": 0,
      "explanation": "type() returns type."
    },
    {
      "level": "Intermediate",
      "question": "How do you remove duplicates from a list?",
      "choices": ["set(list)", "unique(list)", "list.remove_duplicates()", "list.distinct()"],
      "answerIndex": 0,
      "explanation": "set(list) removes duplicates."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a range of numbers?",
      "choices": ["range()", "list()", "numbers()", "seq()"],
      "answerIndex": 0,
      "explanation": "range() returns numbers."
    },
    {
      "level": "Intermediate",
      "question": "How do you join a list of strings?",
      "choices": ["' '.join(list)", "join(list)", "list.join(' ')", "concat(list)"],
      "answerIndex": 0,
      "explanation": "' '.join(list) joins strings."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a list of keys from a dictionary?",
      "choices": ["dict.keys()", "keys(dict)", "dict.get_keys()", "dict.keylist()"],
      "answerIndex": 0,
      "explanation": "dict.keys() returns keys."
    },
    {
      "level": "Intermediate",
      "question": "How do you check the length of a string?",
      "choices": ["len()", "length()", "size()", "count()"],
      "answerIndex": 0,
      "explanation": "len() checks length."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a list of values from a dictionary?",
      "choices": ["dict.values()", "values(dict)", "dict.get_values()", "dict.valuelist()"],
      "answerIndex": 0,
      "explanation": "dict.values() returns values."
    },
    {
      "level": "Intermediate",
      "question": "How do you convert a list to a tuple?",
      "choices": ["tuple(list)", "list.tuple()", "convert(list)", "to_tuple(list)"],
      "answerIndex": 0,
      "explanation": "tuple(list) converts to tuple."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a list of items from a dictionary?",
      "choices": ["dict.items()", "items(dict)", "dict.get_items()", "dict.itemlist()"],
      "answerIndex": 0,
      "explanation": "dict.items() returns items."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a value is in a list?",
      "choices": ["value in list", "list.has(value)", "list.exists(value)", "list[value] != None"],
      "answerIndex": 0,
      "explanation": "value in list checks existence."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the ASCII value of a character?",
      "choices": ["ord()", "ascii()", "char()", "code()"],
      "answerIndex": 0,
      "explanation": "ord() returns ASCII value."
    },
    {
      "level": "Intermediate",
      "question": "How do you convert an integer to a string?",
      "choices": ["str()", "int()", "string()", "to_string()"],
      "answerIndex": 0,
      "explanation": "str() converts to string."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the Unicode character for an integer?",
      "choices": ["chr()", "unicode()", "char()", "code()"],
      "answerIndex": 0,
      "explanation": "chr() returns Unicode character."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string starts with a substring?",
      "choices": ["str.startswith()", "str.begins()", "str.starts()", "str.has_prefix()"],
      "answerIndex": 0,
      "explanation": "str.startswith() checks prefix."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the index of a substring?",
      "choices": ["str.find()", "str.index()", "str.search()", "str.locate()"],
      "answerIndex": 0,
      "explanation": "str.find() returns index."
    },
    {
      "level": "Intermediate",
      "question": "How do you replace a substring in a string?",
      "choices": ["str.replace()", "str.sub()", "str.swap()", "str.change()"],
      "answerIndex": 0,
      "explanation": "str.replace() replaces substring."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a list of words from a string?",
      "choices": ["str.split()", "split(str)", "str.words()", "str.tokenize()"],
      "answerIndex": 0,
      "explanation": "str.split() splits string."
    },
    {
      "level": "Intermediate",
      "question": "How do you remove whitespace from a string?",
      "choices": ["str.strip()", "str.clean()", "str.trim()", "str.remove()"],
      "answerIndex": 0,
      "explanation": "str.strip() removes whitespace."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns a copy of a list?",
      "choices": ["list.copy()", "copy(list)", "list.duplicate()", "list.clone()"],
      "answerIndex": 0,
      "explanation": "list.copy() returns copy."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is numeric?",
      "choices": ["str.isnumeric()", "str.isdigit()", "str.isnumber()", "str.isint()"],
      "answerIndex": 0,
      "explanation": "str.isnumeric() checks numeric."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the reversed iterator of a list?",
      "choices": ["reversed(list)", "list.reverse()", "reverse(list)", "list[::-1]"],
      "answerIndex": 0,
      "explanation": "reversed(list) returns iterator."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is uppercase?",
      "choices": ["str.isupper()", "str.upper()", "str.isuppercase()", "str.iscaps()"],
      "answerIndex": 0,
      "explanation": "str.isupper() checks uppercase."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the lowercase version of a string?",
      "choices": ["str.lower()", "str.downcase()", "str.tolower()", "str.small()"],
      "answerIndex": 0,
      "explanation": "str.lower() returns lowercase."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is lowercase?",
      "choices": ["str.islower()", "str.lower()", "str.islowercase()", "str.ismin()"],
      "answerIndex": 0,
      "explanation": "str.islower() checks lowercase."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the uppercase version of a string?",
      "choices": ["str.upper()", "str.upcase()", "str.toupper()", "str.big()"],
      "answerIndex": 0,
      "explanation": "str.upper() returns uppercase."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string contains only alphabetic characters?",
      "choices": ["str.isalpha()", "str.isletters()", "str.isalphabet()", "str.isword()"],
      "answerIndex": 0,
      "explanation": "str.isalpha() checks alphabetic."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the count of a substring in a string?",
      "choices": ["str.count()", "str.tally()", "str.num()", "str.total()"],
      "answerIndex": 0,
      "explanation": "str.count() returns count."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string ends with a substring?",
      "choices": ["str.endswith()", "str.ends()", "str.has_suffix()", "str.finish()"],
      "answerIndex": 0,
      "explanation": "str.endswith() checks suffix."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the partitioned tuple of a string?",
      "choices": ["str.partition()", "str.split()", "str.divide()", "str.chunk()"],
      "answerIndex": 0,
      "explanation": "str.partition() partitions string."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is decimal?",
      "choices": ["str.isdecimal()", "str.isdigit()", "str.isnumber()", "str.isfloat()"],
      "answerIndex": 0,
      "explanation": "str.isdecimal() checks decimal."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the zfilled version of a string?",
      "choices": ["str.zfill()", "str.fill()", "str.pad()", "str.zero()"],
      "answerIndex": 0,
      "explanation": "str.zfill() pads with zeros."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is printable?",
      "choices": ["str.isprintable()", "str.printable()", "str.isprint()", "str.canprint()"],
      "answerIndex": 0,
      "explanation": "str.isprintable() checks printable."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the titlecased version of a string?",
      "choices": ["str.title()", "str.titled()", "str.caps()", "str.capitalize()"],
      "answerIndex": 0,
      "explanation": "str.title() returns titlecase."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is space?",
      "choices": ["str.isspace()", "str.space()", "str.isblank()", "str.isempty()"],
      "answerIndex": 0,
      "explanation": "str.isspace() checks space."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the capitalized version of a string?",
      "choices": ["str.capitalize()", "str.caps()", "str.title()", "str.upcase()"],
      "answerIndex": 0,
      "explanation": "str.capitalize() capitalizes string."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is alphanumeric?",
      "choices": ["str.isalnum()", "str.isalpha()", "str.isnumber()", "str.isword()"],
      "answerIndex": 0,
      "explanation": "str.isalnum() checks alphanumeric."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the expanded tabs in a string?",
      "choices": ["str.expandtabs()", "str.tabs()", "str.tabify()", "str.spaces()"],
      "answerIndex": 0,
      "explanation": "str.expandtabs() expands tabs."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is identifier?",
      "choices": ["str.isidentifier()", "str.identifier()", "str.isid()", "str.isname()"],
      "answerIndex": 0,
      "explanation": "str.isidentifier() checks identifier."
    },
    {
      "level": "Intermediate",
      "question": "Which function returns the encoded version of a string?",
      "choices": ["str.encode()", "str.coding()", "str.encrypt()", "str.code()"],
      "answerIndex": 0,
      "explanation": "str.encode() encodes string."
    },
    {
      "level": "Intermediate",
      "question": "How do you check if a string is digit?",
      "choices": ["str.isdigit()", "str.isnumber()", "str.isint()", "str.isdecimal()"],
      "answerIndex": 0,
      "explanation": "str.isdigit() checks digit."
  },

    {
      "level": "Advanced",
      "question": "What is a Python decorator?",
      "choices": ["A function that modifies another function", "A type of variable", "A loop structure", "A class method"],
      "answerIndex": 0,
      "explanation": "Decorators modify functions or methods."
    },
    {
      "level": "Advanced",
      "question": "What is a generator in Python?",
      "choices": ["A function that returns an iterator", "A type of list", "A class", "A module"],
      "answerIndex": 0,
      "explanation": "Generators yield values one at a time."
    },
    {
      "level": "Advanced",
      "question": "What does the 'yield' keyword do?",
      "choices": ["Returns a value and pauses the function", "Ends the function", "Raises an exception", "Defines a variable"],
      "answerIndex": 0,
      "explanation": "yield returns a value and suspends function state."
    },
    {
      "level": "Advanced",
      "question": "What is the purpose of __init__.py?",
      "choices": ["Marks a directory as a Python package", "Initializes variables", "Defines a class", "Imports modules"],
      "answerIndex": 0,
      "explanation": "__init__.py marks a package."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([x for x in range(5) if x % 2 == 0])?",
      "choices": ["[0, 2, 4]", "[1, 3, 5]", "[2, 4]", "[0, 2, 4, 6]"],
      "answerIndex": 0,
      "explanation": "List comprehension with condition."
    },
    {
      "level": "Advanced",
      "question": "What is the difference between @staticmethod and @classmethod?",
      "choices": ["classmethod receives class as first argument, staticmethod does not", "staticmethod receives instance as first argument", "Both are the same", "classmethod is only for inheritance"],
      "answerIndex": 0,
      "explanation": "classmethod gets class, staticmethod gets nothing."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({x: x**2 for x in range(3)})?",
      "choices": ["{0: 0, 1: 1, 2: 4}", "{1: 1, 2: 4, 3: 9}", "{0: 1, 1: 2, 2: 3}", "Error"],
      "answerIndex": 0,
      "explanation": "Dictionary comprehension."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print((lambda x: x+1)(2))?",
      "choices": ["3", "2", "1", "Error"],
      "answerIndex": 0,
      "explanation": "Lambda function returns 3."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][-1])?",
      "choices": ["2", "3", "1", "Error"],
      "answerIndex": 0,
      "explanation": "Last element is 2."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i for i in range(3) if i > 0})?",
      "choices": ["{1, 2}", "{0, 1, 2}", "{2}", "Error"],
      "answerIndex": 0,
      "explanation": "Set comprehension with condition."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print((1, 2) + (3, 4))?",
      "choices": ["(1, 2, 3, 4)", "(1, 2)(3, 4)", "[1, 2, 3, 4]", "Error"],
      "answerIndex": 0,
      "explanation": "Tuple concatenation."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({1: 'a', 2: 'b'}.get(3, 'c'))?",
      "choices": ["c", "a", "b", "Error"],
      "answerIndex": 0,
      "explanation": "get() returns default if key missing."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(5) if i % 2])?",
      "choices": ["[1, 3]", "[0, 2, 4]", "[2, 4]", "[1, 2, 3]"],
      "answerIndex": 0,
      "explanation": "Odd numbers from 0 to 4."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}.keys())?",
      "choices": ["dict_keys([0, 1, 2])", "[0, 1, 2]", "{0, 1, 2}", "Error"],
      "answerIndex": 0,
      "explanation": "keys() returns dict_keys object."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][::-1])?",
      "choices": ["[2, 1, 0]", "[0, 1, 2]", "[1, 2, 0]", "Error"],
      "answerIndex": 0,
      "explanation": "Reverse list."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}.values())?",
      "choices": ["dict_values([0, 1, 2])", "[0, 1, 2]", "{0, 1, 2}", "Error"],
      "answerIndex": 0,
      "explanation": "values() returns dict_values object."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][1:])?",
      "choices": ["[1, 2]", "[0, 1]", "[2]", "Error"],
      "answerIndex": 0,
      "explanation": "Slice from index 1."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}.items())?",
      "choices": ["dict_items([(0, 0), (1, 1), (2, 2)])", "[(0, 0), (1, 1), (2, 2)]", "{0: 0, 1: 1, 2: 2}", "Error"],
      "answerIndex": 0,
      "explanation": "items() returns dict_items object."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][::2])?",
      "choices": ["[0, 2]", "[1, 2]", "[2, 0]", "Error"],
      "answerIndex": 0,
      "explanation": "Step slicing."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}[1])?",
      "choices": ["1", "0", "2", "Error"],
      "answerIndex": 0,
      "explanation": "Access value by key."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][-2])?",
      "choices": ["1", "2", "0", "Error"],
      "answerIndex": 0,
      "explanation": "Second to last element."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}.get(2))?",
      "choices": ["2", "0", "1", "Error"],
      "answerIndex": 0,
      "explanation": "get() returns value for key."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print([i for i in range(3)][1:3])?",
      "choices": ["[1, 2]", "[0, 1]", "[2, 3]", "Error"],
      "answerIndex": 0,
      "explanation": "Slice from index 1 to 2."
    },
    {
      "level": "Advanced",
      "question": "What is the output of print({i: i for i in range(3)}.get(3, 'not found'))?",
      "choices": ["not found", "3", "Error", "None"],
      "answerIndex": 0,
      "explanation": "get() returns default if key missing."
  },
    {
      "level": "Beginner",
      "question": "Which of these are valid Python variable names? (Choose all that apply)",
      "choices": ["my_var", "2ndVar", "var_2", "var-2"],
      "answerIndex": [0,2],
      "explanation": "my_var and var_2 are valid variable names in Python."
    },
    {
      "level": "Beginner",
      "question": "Which of these are Python keywords? (Choose all that apply)",
      "choices": ["def", "class", "main", "lambda"],
      "answerIndex": [0,1,3],
      "explanation": "def, class, and lambda are Python keywords."
    },
    {
      "level": "Beginner",
      "question": "Which of these are built-in Python types? (Choose all that apply)",
      "choices": ["int", "float", "number", "str"],
      "answerIndex": [0,1,3],
      "explanation": "int, float, and str are built-in types."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid ways to create a list? (Choose all that apply)",
      "choices": ["[1,2,3]", "list()", "{1,2,3}", "(1,2,3)"],
      "answerIndex": [0,1],
      "explanation": "[1,2,3] and list() create lists."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid boolean values in Python? (Choose all that apply)",
      "choices": ["True", "False", "None", "0"],
      "answerIndex": [0,1],
      "explanation": "True and False are boolean values."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid string delimiters in Python? (Choose all that apply)",
  "choices": ["'text'", "\"text\"", "'''text'''", "`text`"],
      "answerIndex": [0,1,2],
      "explanation": "Single, double, and triple quotes are valid string delimiters."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid ways to import a module? (Choose all that apply)",
      "choices": ["import math", "from math import sqrt", "require('math')", "include math"],
      "answerIndex": [0,1],
      "explanation": "import and from ... import are valid."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid ways to comment in Python? (Choose all that apply)",
      "choices": ["# comment", "// comment", "/* comment */", "-- comment"],
      "answerIndex": [0],
      "explanation": "# is the only valid comment syntax in Python."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid ways to concatenate strings? (Choose all that apply)",
      "choices": ["'a' + 'b'", "'a'.join(['b'])", "'a' * 2", "'a' & 'b'"],
      "answerIndex": [0,1],
      "explanation": "'a' + 'b' and join are valid."
    },
    {
      "level": "Beginner",
      "question": "Which of these are valid ways to create a dictionary? (Choose all that apply)",
      "choices": ["{'a': 1}", "dict(a=1)", "[('a', 1)]", "{1,2,3}"],
      "answerIndex": [0,1],
      "explanation": "{'a': 1} and dict(a=1) create dictionaries."
    },
    {
      "level": "Intermediate",
      "question": "Which of these methods can be used to add items to a Python list? (Choose all that apply)",
      "choices": ["append()", "extend()", "add()", "insert()"],
      "answerIndex": [0,1,3],
      "explanation": "append(), extend(), and insert() add items to a list."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to remove items from a list? (Choose all that apply)",
      "choices": ["remove()", "pop()", "del list[index]", "discard()"],
      "answerIndex": [0,1,2],
      "explanation": "remove(), pop(), and del list[index] remove items."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to create a set in Python? (Choose all that apply)",
      "choices": ["set()", "{1,2,3}", "[1,2,3]", "dict()"],
      "answerIndex": [0,1],
      "explanation": "set() and {1,2,3} create sets."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to iterate over a dictionary? (Choose all that apply)",
      "choices": ["for k in dict", "dict.items()", "dict.keys()", "dict.values()"],
      "answerIndex": [0,1,2,3],
      "explanation": "All listed methods are valid for iteration."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to check if a key exists in a dictionary? (Choose all that apply)",
      "choices": ["key in dict", "dict.has_key(key)", "dict.get(key)", "dict[key]"],
      "answerIndex": [0,2,3],
      "explanation": "key in dict, dict.get(key), and dict[key] are valid."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to reverse a list? (Choose all that apply)",
      "choices": ["list[::-1]", "reversed(list)", "list.reverse()", "reverse(list)"],
      "answerIndex": [0,1,2],
      "explanation": "list[::-1], reversed(list), and list.reverse() reverse a list."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to join a list of strings? (Choose all that apply)",
      "choices": ["' '.join(list)", "join(list)", "list.join(' ')", "concat(list)"],
      "answerIndex": [0],
      "explanation": "' '.join(list) joins strings."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to handle exceptions? (Choose all that apply)",
      "choices": ["try/except", "try/catch", "try/finally", "catch/except"],
      "answerIndex": [0,2],
      "explanation": "try/except and try/finally are valid."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to create a tuple? (Choose all that apply)",
      "choices": ["(1,2)", "tuple([1,2])", "[1,2]", "{1,2}"],
      "answerIndex": [0,1],
      "explanation": "(1,2) and tuple([1,2]) create tuples."
    },
    {
      "level": "Intermediate",
      "question": "Which of these are valid ways to check if a string contains a substring? (Choose all that apply)",
      "choices": ["'sub' in string", "string.find('sub')", "string.index('sub')", "string.has('sub')"],
      "answerIndex": [0,1,2],
      "explanation": "'sub' in string, find, and index are valid."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to define a Python class? (Choose all that apply)",
      "choices": ["class MyClass:", "def MyClass():", "class MyClass(object):", "MyClass = type('MyClass', (), {})"],
      "answerIndex": [0,2,3],
      "explanation": "class MyClass:, class MyClass(object):, and type() are valid ways."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use decorators? (Choose all that apply)",
      "choices": ["@staticmethod", "@classmethod", "@property", "@decorator"],
      "answerIndex": [0,1,2,3],
      "explanation": "All listed are valid decorator usages."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to create a generator? (Choose all that apply)",
      "choices": ["def gen(): yield 1", "(x for x in range(3))", "[x for x in range(3)]", "lambda x: x"],
      "answerIndex": [0,1],
      "explanation": "def with yield and generator expressions are valid."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use list comprehensions? (Choose all that apply)",
      "choices": ["[x for x in range(5)]", "(x for x in range(5))", "{x for x in range(5)}", "[x for x in range(5) if x % 2 == 0]"],
      "answerIndex": [0,3],
      "explanation": "[x for x in range(5)] and [x for x in range(5) if x % 2 == 0] are list comprehensions."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use lambda functions? (Choose all that apply)",
      "choices": ["lambda x: x+1", "lambda x, y: x*y", "def lambda(x): return x", "lambda: 42"],
      "answerIndex": [0,1,3],
      "explanation": "lambda x: x+1, lambda x, y: x*y, and lambda: 42 are valid."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use the map function? (Choose all that apply)",
      "choices": ["map(str, [1,2,3])", "list(map(int, ['1','2']))", "map(lambda x: x+1, range(3))", "map([1,2,3], str)"],
      "answerIndex": [0,1,2],
      "explanation": "First three are valid map usages."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use the zip function? (Choose all that apply)",
      "choices": ["zip([1,2],[3,4])", "list(zip('ab','cd'))", "zip([1,2,3])", "zip()"],
      "answerIndex": [0,1,2],
      "explanation": "First three are valid zip usages."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use the filter function? (Choose all that apply)",
      "choices": ["filter(lambda x: x>0, [1,-1])", "list(filter(str.isdigit, ['1','a']))", "filter([1,2,3], lambda x: x)", "filter(None, [0,1,2])"],
      "answerIndex": [0,1,3],
      "explanation": "First, second, and fourth are valid filter usages."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use the reduce function? (Choose all that apply)",
      "choices": ["from functools import reduce", "reduce(lambda x,y: x+y, [1,2,3])", "reduce([1,2,3], lambda x: x)", "reduce(lambda x: x, [1,2,3])"],
      "answerIndex": [0,1,3],
      "explanation": "First, second, and fourth are valid reduce usages."
    },
    {
      "level": "Advanced",
      "question": "Which of these are valid ways to use the sorted function? (Choose all that apply)",
      "choices": ["sorted([3,2,1])", "sorted('abc')", "sorted({1,2,3})", "sort([1,2,3])"],
      "answerIndex": [0,1,2],
      "explanation": "First three are valid sorted usages."
    }
  ]
  ,
  "anki": [
    { "level": "Beginner", "front": "What keyword defines a function in Python?", "back": "def", "explanation": "Functions start with the def keyword." },
    { "level": "Beginner", "front": "What do we call a value like True/False?", "back": "Boolean (bool)", "explanation": "Python's boolean type is bool." },
    { "level": "Beginner", "front": "How do you start a comment?", "back": "#", "explanation": "Hash (#) starts a comment." },
    { "level": "Beginner", "front": "Built-in type for text strings?", "back": "str" },
    { "level": "Beginner", "front": "Built-in type for whole numbers?", "back": "int" },
    { "level": "Beginner", "front": "Built-in type for decimal numbers?", "back": "float" },
    { "level": "Beginner", "front": "Empty value in Python?", "back": "None" },
    { "level": "Beginner", "front": "Function to print output?", "back": "print()" },
    { "level": "Beginner", "front": "Function to get input from user?", "back": "input()" },
    { "level": "Beginner", "front": "How to get the length of a list or string?", "back": "len(x)" },
    { "level": "Beginner", "front": "Index of the first element in a list?", "back": "0" },
    { "level": "Beginner", "front": "Operator for exponentiation?", "back": "**" },
    { "level": "Beginner", "front": "Operator for integer (floor) division?", "back": "//" },
    { "level": "Beginner", "front": "How to define a list literal with elements 1,2,3?", "back": "[1, 2, 3]" },
    { "level": "Beginner", "front": "How to define a tuple with 1,2?", "back": "(1, 2)" },
    { "level": "Beginner", "front": "How to define a set with 1,2,3?", "back": "{1, 2, 3}" },
    { "level": "Beginner", "front": "How to define a dict with key 'a' to 1?", "back": "{'a': 1}" },
    { "level": "Beginner", "front": "Keyword to define a class?", "back": "class" },
    { "level": "Beginner", "front": "Which keyword imports modules?", "back": "import" },
    { "level": "Beginner", "front": "Check equality operator?", "back": "==" },
    { "level": "Beginner", "front": "Inequality operator?", "back": "!=" },
    { "level": "Beginner", "front": "Membership test operator in sequences/sets?", "back": "in" },
    { "level": "Beginner", "front": "Convert string '123' to int?", "back": "int('123')" },
    { "level": "Beginner", "front": "Convert 3.14 to string?", "back": "str(3.14)" },
    { "level": "Beginner", "front": "Append item x to list L?", "back": "L.append(x)" },

    { "level": "Intermediate", "front": "What does list comprehension [x*x for x in range(3)] return?", "back": "[0, 1, 4]" },
    { "level": "Intermediate", "front": "What does dict.get(key, default) do?", "back": "Returns value or default if key not present" },
    { "level": "Intermediate", "front": "How to open a file for reading UTF-8 safely?", "back": "with open(path, 'r', encoding='utf-8') as f:" },
    { "level": "Intermediate", "front": "What is a context manager?", "back": "An object with __enter__ and __exit__ controlling a with block" },
    { "level": "Intermediate", "front": "How to iterate index and value over a list?", "back": "for i, v in enumerate(list):" },
    { "level": "Intermediate", "front": "How to iterate pairs from two lists?", "back": "for a, b in zip(list1, list2):" },
    { "level": "Intermediate", "front": "Preferred way to format strings (modern)?", "back": "f-strings (f'...')" },
    { "level": "Intermediate", "front": "How to catch an exception?", "back": "try: ... except Exception as e:" },
    { "level": "Intermediate", "front": "How to raise an exception?", "back": "raise ValueError('message')" },
    { "level": "Intermediate", "front": "What does *args mean?", "back": "Collects extra positional arguments as a tuple" },
    { "level": "Intermediate", "front": "What does **kwargs mean?", "back": "Collects extra keyword arguments as a dict" },
    { "level": "Intermediate", "front": "How to merge two dicts d1 and d2 (3.9+)?", "back": "d1 | d2" },
    { "level": "Intermediate", "front": "What is the difference between list.copy() and list[:] ?", "back": "Both make a shallow copy" },
    { "level": "Intermediate", "front": "How to remove duplicates preserving order?", "back": "list(dict.fromkeys(seq))" },
    { "level": "Intermediate", "front": "How to sort list L by key len?", "back": "sorted(L, key=len)" },
    { "level": "Intermediate", "front": "What is a generator expression?", "back": "(expr for x in iterable) producing values lazily" },
    { "level": "Intermediate", "front": "How to join list of strings S by comma?", "back": "','.join(S)" },
    { "level": "Intermediate", "front": "Which module provides regular expressions?", "back": "re" },
    { "level": "Intermediate", "front": "How to copy a list deeply?", "back": "copy.deepcopy(list)" },
    { "level": "Intermediate", "front": "What is the default dict type preserving insertion order?", "back": "dict (3.7+) preserves order" },
    { "level": "Intermediate", "front": "How to get unique elements from list L?", "back": "set(L)" },
    { "level": "Intermediate", "front": "How to filter only even numbers from list L?", "back": "[x for x in L if x % 2 == 0]" },
    { "level": "Intermediate", "front": "What is a slice that reverses a list?", "back": "L[::-1]" },
    { "level": "Intermediate", "front": "How to sort list in place?", "back": "list.sort()" },
    { "level": "Intermediate", "front": "How to get a sorted copy?", "back": "sorted(list)" },
    { "level": "Intermediate", "front": "How to check if s starts with prefix p?", "back": "s.startswith(p)" },
    { "level": "Intermediate", "front": "How to replace 'a' with 'b' in s?", "back": "s.replace('a','b')" },
    { "level": "Intermediate", "front": "What is the walrus operator?", "back": ":= assignment expression" },
    { "level": "Intermediate", "front": "How to annotate a function parameter type?", "back": "def f(x: int) -> str:" },
    { "level": "Intermediate", "front": "How to type hint a list of strings?", "back": "list[str] or List[str] (from typing)" },
    { "level": "Intermediate", "front": "How to create a virtual environment (CLI)?", "back": "python -m venv .venv" },
    { "level": "Intermediate", "front": "Which file lists dependencies in pip freeze output?", "back": "requirements.txt" },
    { "level": "Intermediate", "front": "How to time a small snippet quickly?", "back": "Use timeit module or %%timeit in notebooks" },
    { "level": "Intermediate", "front": "Preferred logging module?", "back": "logging" },
    { "level": "Intermediate", "front": "What does with open(...) as f: guarantee?", "back": "File closes automatically (even on exceptions)" },
    { "level": "Intermediate", "front": "How to get the absolute path of current file?", "back": "Path(__file__).resolve() (from pathlib)" },
    { "level": "Intermediate", "front": "How to format numbers with 2 decimals?", "back": "f'{x:.2f}'" },
    { "level": "Intermediate", "front": "How to enumerate dictionary items?", "back": "for k, v in d.items():" },
    { "level": "Intermediate", "front": "Get only keys from dict d?", "back": "d.keys()" },
    { "level": "Intermediate", "front": "Get only values from dict d?", "back": "d.values()" },
    { "level": "Intermediate", "front": "Remove key 'k' from dict d safely?", "back": "d.pop('k', None)" },
    { "level": "Intermediate", "front": "How to read JSON from a file?", "back": "json.load(open_file)" },
    { "level": "Intermediate", "front": "How to dump an object as JSON string?", "back": "json.dumps(obj)" },
    { "level": "Intermediate", "front": "What is __name__ == '__main__' used for?", "back": "Entry point guard" },
    { "level": "Intermediate", "front": "How to write a list L to file lines?", "back": "f.write('\n'.join(L))" },
    { "level": "Intermediate", "front": "How to split a path into parts?", "back": "Path(path).parts" },
    { "level": "Intermediate", "front": "How to random shuffle a list in place?", "back": "random.shuffle(L)" },
    { "level": "Intermediate", "front": "How to deep copy an object?", "back": "copy.deepcopy(obj)" },
    { "level": "Intermediate", "front": "What is functools.lru_cache used for?", "back": "Memoization of function results" },
    { "level": "Intermediate", "front": "How to create a dataclass?", "back": "@dataclass class C: ..." },
    { "level": "Intermediate", "front": "How to specify optional type hint?", "back": "Optional[T] or T | None (3.10+)" },
    { "level": "Intermediate", "front": "How to create a virtual environment (library)?", "back": "venv.create(path, with_pip=True)" },
    { "level": "Intermediate", "front": "Which module handles command-line args?", "back": "argparse" },
    { "level": "Intermediate", "front": "Which library provides numerical arrays?", "back": "numpy" },
    { "level": "Intermediate", "front": "Which library is commonly used for dataframes?", "back": "pandas" },
    { "level": "Intermediate", "front": "Which module handles dates and times?", "back": "datetime" },
    { "level": "Intermediate", "front": "Which module handles HTTP requests (3rd party)?", "back": "requests" },

    { "level": "Advanced", "front": "What is the GIL in CPython?", "back": "Global Interpreter Lock: only one thread runs Python bytecode at a time" },
    { "level": "Advanced", "front": "What does @property do?", "back": "Turns a method into an attribute-like getter" },
    { "level": "Advanced", "front": "What is a descriptor?", "back": "Object with __get__/__set__/__delete__ controlling attribute access" },
    { "level": "Advanced", "front": "Difference between @staticmethod and @classmethod?", "back": "classmethod gets the class as first arg; staticmethod gets none" },
    { "level": "Advanced", "front": "What is a metaclass?", "back": "Class of a class controlling class creation (type)" },
    { "level": "Advanced", "front": "What is monkey patching?", "back": "Modifying objects/modules at runtime" },
    { "level": "Advanced", "front": "What does yield from do?", "back": "Delegates to a subgenerator/iterable" },
    { "level": "Advanced", "front": "What is asyncio used for?", "back": "Asynchronous I/O and concurrency via event loop" },
    { "level": "Advanced", "front": "What is a coroutine?", "back": "Function defined with async def that can be awaited" },
    { "level": "Advanced", "front": "How to create a custom context manager?", "back": "Define __enter__ and __exit__ or use @contextmanager" },
    { "level": "Advanced", "front": "What is a weakref?", "back": "Reference that doesn't increase reference count" },
    { "level": "Advanced", "front": "What does __slots__ do?", "back": "Restricts attribute set and saves memory" },
    { "level": "Advanced", "front": "How to create a read-only dataclass field?", "back": "field(init=False) or property without setter" },
    { "level": "Advanced", "front": "What is duck typing?", "back": "Behavioral typing: if it quacks like a duck..." },
    { "level": "Advanced", "front": "What is structural subtyping in typing?", "back": "Protocols define required members without inheritance" },
    { "level": "Advanced", "front": "What is the MRO?", "back": "Method Resolution Order in multiple inheritance" },
    { "level": "Advanced", "front": "What is metaprogramming in Python?", "back": "Writing code that manipulates code (metaclasses, AST, decorators)" },
    { "level": "Advanced", "front": "How to implement contextvars usage?", "back": "Use contextvars.ContextVar to store context local state" },
    { "level": "Advanced", "front": "What is the difference between deepcopy and copy?", "back": "deepcopy recurses into nested objects; copy is shallow" },
    { "level": "Advanced", "front": "What is the GIL impact on CPU-bound threading?", "back": "Limits parallel execution; use multiprocessing or native extensions" },
    { "level": "Advanced", "front": "What is Cython typically used for?", "back": "Compiling Python-like code to C for speed" },
    { "level": "Advanced", "front": "What is a contextlib.ExitStack?", "back": "Manages multiple context managers dynamically" },
    { "level": "Advanced", "front": "What is the purpose of __getattr__?", "back": "Called when attribute not found; for dynamic attribute access" },
    { "level": "Advanced", "front": "What is a PyPI wheel?", "back": "Built package distribution format (.whl)" },
    { "level": "Advanced", "front": "What is a memoryview?", "back": "Zero-copy views of binary data" }
  ]
  ,
  "cloze": [
    { "level": "Beginner", "prompt": "Fill in the operator:", "cloze": "2 {{**}} 3 equals 8" },
    { "level": "Beginner", "prompt": "Type name:", "cloze": "Text values in Python use type {{str}}" },
    { "level": "Beginner", "prompt": "Built-in function:", "cloze": "To get the length of a list, call {{len}}(list)" },
    { "level": "Beginner", "prompt": "Comments:", "cloze": "Python comments start with {{#}}" },
    { "level": "Beginner", "prompt": "Equality:", "cloze": "The equality operator is {{==}}" },
    { "level": "Beginner", "prompt": "Inequality:", "cloze": "The not-equal operator is {{!=}}" },
    { "level": "Beginner", "prompt": "Indexing:", "cloze": "Lists are {{zero}}-indexed (use 0 for the first element)" },
    { "level": "Beginner", "prompt": "Concatenation:", "cloze": "Strings can be concatenated with the {{+}} operator" },
    { "level": "Beginner", "prompt": "Conversion:", "cloze": "Convert '123' to int via {{int}}('123')" },
    { "level": "Beginner", "prompt": "Import:", "cloze": "Modules are brought in with the {{import}} statement" },
    { "level": "Beginner", "prompt": "None:", "cloze": "Python's null value is {{None}}" },
    { "level": "Beginner", "prompt": "Booleans:", "cloze": "The boolean true is {{True}} and false is {{False}}" },
    { "level": "Beginner", "prompt": "Lists:", "cloze": "A list literal looks like {{[1, 2, 3]}}" },
    { "level": "Beginner", "prompt": "Tuples:", "cloze": "A tuple literal looks like {{(1, 2)}}" },
    { "level": "Beginner", "prompt": "Sets:", "cloze": "A set literal looks like {{\u007B1, 2, 3\u007D}}" },
    { "level": "Beginner", "prompt": "Dicts:", "cloze": "A dict literal with a:1 is {{\u007B'a': 1\u007D}}" },
    { "level": "Beginner", "prompt": "Loop:", "cloze": "A typical for loop is: for i in {{range}}(5):" },
    { "level": "Beginner", "prompt": "Input:", "cloze": "Read user input using {{input}}()" },
    { "level": "Beginner", "prompt": "Output:", "cloze": "Write to stdout using {{print}}()" },
    { "level": "Beginner", "prompt": "Membership:", "cloze": "Check membership with the {{in}} operator" },
    { "level": "Beginner", "prompt": "Floor division:", "cloze": "Integer division operator is {{//}}" },
    { "level": "Beginner", "prompt": "Exponentiation:", "cloze": "Exponentiation operator is {{**}}" },
    { "level": "Beginner", "prompt": "Strings:", "cloze": "Double quotes like {{\"hello\"}} make a string" },
    { "level": "Beginner", "prompt": "Booleans type:", "cloze": "The boolean type name is {{bool}}" },
    { "level": "Beginner", "prompt": "None type:", "cloze": "The type of None is {{NoneType}}" },

    { "level": "Intermediate", "prompt": "Comprehension:", "cloze": "A list comprehension looks like [x for x in {{iterable}}]" },
    { "level": "Intermediate", "prompt": "Context manager:", "cloze": "with {{open}}(path) as f: will close the file automatically" },
    { "level": "Intermediate", "prompt": "Enumerate:", "cloze": "Use {{enumerate}}(items) to get (index, value) pairs" },
    { "level": "Intermediate", "prompt": "Zip:", "cloze": "Use {{zip}}(a, b) to iterate pairs" },
    { "level": "Intermediate", "prompt": "Formatting:", "cloze": "Use {{f-strings}} like f'Value={x}' for formatting" },
    { "level": "Intermediate", "prompt": "Exceptions:", "cloze": "Use try and {{except}} to handle exceptions" },
    { "level": "Intermediate", "prompt": "Raising:", "cloze": "Raise an exception with {{raise}} ValueError('msg')" },
    { "level": "Intermediate", "prompt": "Args:", "cloze": "*args collects extra {{positional}} arguments" },
    { "level": "Intermediate", "prompt": "Kwargs:", "cloze": "**kwargs collects extra {{keyword}} arguments" },
    { "level": "Intermediate", "prompt": "Dict merge:", "cloze": "In Python 3.9+, merge dicts with {{|}} operator" },
    { "level": "Intermediate", "prompt": "Order:", "cloze": "Since 3.7, the built-in dict preserves {{insertion}} order" },
    { "level": "Intermediate", "prompt": "Set:", "cloze": "Unique elements of a list via {{set}}(L)" },
    { "level": "Intermediate", "prompt": "Reverse:", "cloze": "Reverse a list with slice {{[::-1]}}" },
    { "level": "Intermediate", "prompt": "Sort:", "cloze": "Sort a list in-place with {{list.sort}}()" },
    { "level": "Intermediate", "prompt": "Sorted:", "cloze": "Get a sorted copy using {{sorted}}(list)" },
    { "level": "Intermediate", "prompt": "Prefix:", "cloze": "Check a prefix using s.{{startswith}}(p)" },
    { "level": "Intermediate", "prompt": "Replace:", "cloze": "Replace in string s with s.{{replace}}('a','b')" },
    { "level": "Intermediate", "prompt": "Walrus:", "cloze": "Assignment expression is written {{:=}}" },
    { "level": "Intermediate", "prompt": "Annotations:", "cloze": "Type hints go after ':' and return after {{->}}" },
    { "level": "Intermediate", "prompt": "Join:", "cloze": "Join strings with separator using {{join}}" },
    { "level": "Intermediate", "prompt": "Regex:", "cloze": "The regex module is {{re}}" },
    { "level": "Intermediate", "prompt": "JSON:", "cloze": "Dump object to JSON string with json.{{dumps}}(obj)" },
    { "level": "Intermediate", "prompt": "JSON file:", "cloze": "Read JSON from a file with json.{{load}}(f)" },
    { "level": "Intermediate", "prompt": "Logging:", "cloze": "Use the {{logging}} module for application logs" },
    { "level": "Intermediate", "prompt": "Memoize:", "cloze": "Use functools.{{lru_cache}} to memoize" },
    { "level": "Intermediate", "prompt": "Dataclass:", "cloze": "Define a data container with @{{dataclass}}" },
    { "level": "Intermediate", "prompt": "Optional type:", "cloze": "An optional value is T or {{None}}" },
    { "level": "Intermediate", "prompt": "Requests:", "cloze": "Popular HTTP client library is {{requests}}" },
    { "level": "Intermediate", "prompt": "Datetime:", "cloze": "Work with dates/times using {{datetime}}" },
    { "level": "Intermediate", "prompt": "Numbers:", "cloze": "Large arrays and math with {{numpy}}" },
    { "level": "Intermediate", "prompt": "DataFrames:", "cloze": "Tabular data using {{pandas}}" },
    { "level": "Intermediate", "prompt": "Enumerate dict:", "cloze": "Iterate key/value pairs via d.{{items}}()" },
    { "level": "Intermediate", "prompt": "Pop default:", "cloze": "Remove possibly missing key with d.{{pop}}('k', None)" },
    { "level": "Intermediate", "prompt": "Deep copy:", "cloze": "Copy nested structures using copy.{{deepcopy}}" },
    { "level": "Intermediate", "prompt": "File context:", "cloze": "with open(...) guarantees {{close}} on exit" },
    { "level": "Intermediate", "prompt": "Path parts:", "cloze": "Break path into parts with Path(path).{{parts}}" },
    { "level": "Intermediate", "prompt": "Shuffle:", "cloze": "Randomize list order with random.{{shuffle}}" },
    { "level": "Intermediate", "prompt": "Type of True:", "cloze": "The type of True is {{bool}}" },
  { "level": "Intermediate", "prompt": "F-string:", "cloze": "Format 3 decimals via the specifier {{:.3f}} in an f-string" },
    { "level": "Intermediate", "prompt": "Slice step:", "cloze": "A step-2 slice looks like {{[::2]}}" },
    { "level": "Intermediate", "prompt": "Dict items:", "cloze": "All key/value pairs via d.{{items}}()" },
    { "level": "Intermediate", "prompt": "Keys:", "cloze": "Get only keys via d.{{keys}}()" },
    { "level": "Intermediate", "prompt": "Values:", "cloze": "Get only values via d.{{values}}()" },
    { "level": "Intermediate", "prompt": "Any/All:", "cloze": "Check truth across iterables using {{any}} / {{all}}" },
    { "level": "Intermediate", "prompt": "Map:", "cloze": "Apply function over iterable using {{map}}(func, it)" },
    { "level": "Intermediate", "prompt": "Filter:", "cloze": "Keep items matching a predicate using {{filter}}(pred, it)" },
    { "level": "Intermediate", "prompt": "Sum:", "cloze": "Total numbers in an iterable via {{sum}}(it)" },
    { "level": "Intermediate", "prompt": "Min/Max:", "cloze": "Minimum and maximum via {{min}} / {{max}}" },

    { "level": "Advanced", "prompt": "Decorators:", "cloze": "A decorator is a function that {{wraps}} another function" },
    { "level": "Advanced", "prompt": "Generators:", "cloze": "A generator {{yields}} values lazily" },
    { "level": "Advanced", "prompt": "Yield from:", "cloze": "The syntax {{yield from}} delegates to a sub-iterator" },
    { "level": "Advanced", "prompt": "GIL:", "cloze": "The CPython {{GIL}} allows only one thread to execute bytecode at a time" },
    { "level": "Advanced", "prompt": "Async:", "cloze": "The async event loop is driven by {{await}} and coroutines" },
    { "level": "Advanced", "prompt": "Descriptor:", "cloze": "A descriptor implements __get__/__set__/__delete__ to control {{attribute}} access" },
    { "level": "Advanced", "prompt": "Slots:", "cloze": "Using __slots__ can {{reduce}} memory usage per instance" },
    { "level": "Advanced", "prompt": "Weakrefs:", "cloze": "A weakref doesn't increase {{reference}} count" },
    { "level": "Advanced", "prompt": "MRO:", "cloze": "MRO stands for Method {{Resolution}} Order" },
    { "level": "Advanced", "prompt": "Metaclass:", "cloze": "A metaclass controls class {{creation}}" },
    { "level": "Advanced", "prompt": "Property:", "cloze": "@property turns a method into a {{getter}}" },
    { "level": "Advanced", "prompt": "Contextlib:", "cloze": "contextlib.{{ExitStack}} can handle dynamic contexts" },
    { "level": "Advanced", "prompt": "LRU Cache:", "cloze": "functools.{{lru_cache}} caches results by args" },
    { "level": "Advanced", "prompt": "Typing Protocols:", "cloze": "A Protocol defines a {{structural}} interface" },
    { "level": "Advanced", "prompt": "AST:", "cloze": "The module for abstract syntax trees is {{ast}}" },
    { "level": "Advanced", "prompt": "Cython:", "cloze": "{{Cython}} compiles Python-like code to C" },
    { "level": "Advanced", "prompt": "Multiprocessing:", "cloze": "CPU-bound tasks can use {{multiprocessing}} for parallelism" },
    { "level": "Advanced", "prompt": "Numba:", "cloze": "{{Numba}} JIT-compiles numerical Python" },
    { "level": "Advanced", "prompt": "PyPy:", "cloze": "{{PyPy}} is an alternative Python interpreter with JIT" },
    { "level": "Advanced", "prompt": "Read-only property:", "cloze": "A property without a {{setter}} is read-only" },
    { "level": "Advanced", "prompt": "Coroutine:", "cloze": "An async function defines a {{coroutine}}" },
    { "level": "Advanced", "prompt": "Awaitable:", "cloze": "Objects implementing __await__ are {{awaitable}}" },
    { "level": "Advanced", "prompt": "GIL impact:", "cloze": "The GIL limits Python thread {{parallelism}} for CPU-bound code" },
    { "level": "Advanced", "prompt": "Memoryview:", "cloze": "Use {{memoryview}} for zero-copy slices of bytes" },
    { "level": "Advanced", "prompt": "Buffer protocol:", "cloze": "The {{buffer}} protocol exposes raw memory to other objects" },
    { "level": "Advanced", "prompt": "Contextvars:", "cloze": "Use {{contextvars}} for context-local state" }
  ]
}